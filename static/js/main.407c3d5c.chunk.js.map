{"version":3,"sources":["components/Product.js","components/ProductList.js","productsData.js","components/Dropdown.js","components/EditProduct.js","redux/actions/productActions.js","redux/actions/types.js","redux/reducers/productsReducer.js","redux/reducers/index.js","redux/store/store.js","serviceWorker.js","index.js","ProductApp.js"],"names":["connect","product","name","weight","availability","isEditable","to","id","style","width","textAlign","state","products","productsData","length","map","index","key","pricingInfo","budget","premier","Dropdown","props","options","selectedOption","handleOnClick","bind","this","setState","nextProps","selectBox","document","getElementById","selectedValue","selectedIndex","value","onChange","option","selected","Component","EditProduct","productUrl","pricingTier","priceRange","onSubmit","e","target","preventDefault","updateProduct","history","push","htmlFor","type","defaultValue","required","defaultChecked","val","parseInt","match","params","find","item","payload","initialState","combineReducers","action","createStore","rootReducer","Boolean","window","location","hostname","ReactDOM","render","store","className","exact","path","component","ProductList","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.407c3d5c.chunk.js","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst Product = ({ product }) => (\r\n    <tr>\r\n        <td>{product.name}</td>\r\n        <td>{product.weight}</td>\r\n        <td>{product.availability}</td>\r\n        <td>\r\n            {product.isEditable ?\r\n                <Link to={`/DemoPages/edit-product/${product.id}`}>\r\n                    <button>EDIT</button>\r\n                </Link>\r\n                : \"\"}\r\n        </td>\r\n    </tr>\r\n);\r\n\r\nexport default connect()(Product);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Product from './Product';\r\n\r\nconst style = {\r\n    width: \"50%\",\r\n    textAlign: \"left\"\r\n}\r\n\r\nconst ProductList = ({ products }) => (\r\n    <div>\r\n        <h1>Product List</h1>\r\n        <table style={style}>\r\n            <thead>\r\n                <tr>\r\n                    <th>Name</th>\r\n                    <th>Weight</th>\r\n                    <th>Availability</th>\r\n                    <th></th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {products && products.length\r\n                    ? products.map((product, index) => {\r\n                        return <Product key={index} product={product} />\r\n                    })\r\n                    : \"No products!\"\r\n                }\r\n            </tbody>\r\n        </table>\r\n    </div>\r\n);\r\n\r\nconst mapStateToProps = state => {\r\n    const products = state.productsData.products\r\n    return { products };\r\n}\r\n\r\nexport default connect(mapStateToProps)(ProductList);","export const products = [\r\n    {\r\n        name: \"Micromax A57\",\r\n        pricingTier: \"budget\",\r\n        priceRange: \"5k-8k\",\r\n        weight: 200, // In grams,\r\n        availability: 100,\r\n        productUrl: \"https://e...content-available-to-author-only...e.com/mma57\",\r\n        isEditable: true\r\n    },\r\n    {\r\n        name: \"OnePlus 6T\",\r\n        pricingTier: \"premier\",\r\n        priceRange: \"35k-45k\",\r\n        weight: 200, // In grams\r\n        availability: 30,\r\n        productUrl: \"https://e...content-available-to-author-only...e.com/op6t\",\r\n        isEditable: true\r\n    },\r\n    {\r\n        name: \"Redmi Ultra\",\r\n        pricingTier: \"budget\",\r\n        priceRange: \"8k-11k\",\r\n        weight: 150, // In grams\r\n        availability: 50,\r\n        productUrl: \"https://e...content-available-to-author-only...e.com/redmiu\",\r\n        isEditable: true\r\n    }\r\n]\r\n\r\nexport const pricingInfo = {\r\n    budget: [\r\n        \"4k-6k\",\r\n        \"5k-8k\",\r\n        \"8k-11k\"\r\n    ],\r\n    premier: [\r\n        \"23k-28k\",\r\n        \"30k-34k\",\r\n        \"35k-45k\"\r\n    ]\r\n}","import React, { Component } from 'react';\r\n\r\nclass Dropdown extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            options: [],\r\n            selectedOption: \"\"\r\n        };\r\n        this.handleOnClick = this.handleOnClick.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState({\r\n            options: this.props.options,\r\n            selectedOption: this.props.selectedOption\r\n        });\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps) {\r\n        let options = nextProps.options;\r\n        this.setState({\r\n            options: options\r\n        });\r\n    }\r\n\r\n    handleOnClick() {\r\n        let selectBox = document.getElementById(\"selectBox\");\r\n        var selectedValue = selectBox.options[selectBox.selectedIndex].value;\r\n        this.props.selectedValue(selectedValue);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <select id=\"selectBox\" onChange={this.handleOnClick}>\r\n                {this.state.options && this.state.options && this.state.options.map((option, key) => {\r\n                    if (this.state.selectedOption !== \"\" && option === this.state.selectedOption) {\r\n                        return <option selected key={key} value={option}>{option}</option>;\r\n                    }\r\n                    else {\r\n                        return <option key={key} value={option}>{option}</option>;\r\n                    }\r\n                })}\r\n            </select>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Dropdown;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { pricingInfo } from '../productsData';\r\nimport Dropdown from './Dropdown';\r\nimport { updateProduct } from '../redux/actions/productActions';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nclass EditProduct extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.onChange = this.onChange.bind(this);\r\n        this.onSubmit = this.onSubmit.bind(this);\r\n    }\r\n    state = {\r\n        name: this.props.product.name,\r\n        weight: this.props.product.weight,\r\n        availability: this.props.product.availability,\r\n        productUrl: this.props.product.productUrl,\r\n        pricingTier: this.props.product.pricingTier,\r\n        priceRange: this.props.product.priceRange,\r\n        isEditable: this.props.product.isEditable\r\n    }\r\n\r\n    onChange(e) {\r\n        this.setState({ [e.target.name]: e.target.value });\r\n    }\r\n\r\n    onSubmit(e) {\r\n        e.preventDefault();\r\n        const product = {\r\n            id: this.props.product.id,\r\n            name: this.state.name,\r\n            weight: this.state.weight,\r\n            availability: this.state.availability,\r\n            productUrl: this.state.productUrl,\r\n            pricingTier: this.state.pricingTier,\r\n            priceRange: this.state.priceRange,\r\n            isEditable: this.state.isEditable\r\n        }\r\n        this.props.updateProduct(product);\r\n        this.props.history.push(\"/DemoPages/\");\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h3>EDIT PRODUCT</h3>\r\n                <form onSubmit={this.onSubmit}>\r\n                    <table>\r\n                        <tbody>\r\n                            <tr>\r\n                                <td><label htmlFor=\"productName\">Name: </label></td>\r\n                                <td><input type=\"text\" name=\"name\" id=\"productName\"\r\n                                    defaultValue={this.state.name}\r\n                                    onChange={this.onChange}\r\n                                    required\r\n                                /></td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td><label htmlFor=\"productWeight\">Weight: </label></td>\r\n                                <td><input type=\"text\" name=\"weight\" id=\"productWeight\"\r\n                                    defaultValue={this.state.weight}\r\n                                    onChange={this.onChange}\r\n                                    required\r\n                                /></td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td><label htmlFor=\"productAvailability\">Availability: </label></td>\r\n                                <td><input type=\"number\" name=\"availability\" id=\"productAvailability\"\r\n                                    defaultValue={this.state.availability}\r\n                                    onChange={this.onChange}\r\n                                /></td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td><label htmlFor=\"productURL\">Product Url: </label></td>\r\n                                <td><input type=\"text\" name=\"url\" id=\"productURL\"\r\n                                    defaultValue={this.state.productUrl}\r\n                                    onChange={this.onChange}\r\n                                    required\r\n                                /></td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td><label>Price Tier </label></td>\r\n                                <td>\r\n                                    <input onChange={this.onChange} type=\"radio\" name=\"pricingTier\" id=\"productBudget\" value=\"budget\" defaultChecked={(this.state.pricingTier === \"budget\")} />\r\n                                    <label htmlFor=\"productBudget\">Budget</label>\r\n                                    <input onChange={this.onChange} type=\"radio\" name=\"pricingTier\" id=\"productPremier\" value=\"premier\" defaultChecked={(this.state.pricingTier === \"premier\")} />\r\n                                    <label htmlFor=\"productPremier\">Premier</label>\r\n                                </td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td><label htmlFor=\"productPriceRange\">Price Range</label></td>\r\n                                <td>\r\n                                    <Dropdown options={pricingInfo[this.state.pricingTier]} selectedOption={this.state.priceRange}\r\n                                        selectedValue={(val) => this.onChange({ target: { name: \"priceRange\", value: val } })} />\r\n                                </td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td><label htmlFor=\"productIsEditable\">Is Editable</label></td>\r\n                                <td><input type=\"checkbox\" name=\"isEditable\" id=\"productIsEditable\"\r\n                                    defaultChecked={this.state.isEditable}\r\n                                /></td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td style={{ textAlign: \"center\" }}><button type=\"submit\">Submit</button></td>\r\n                                <td style={{ textAlign: \"center\" }}>\r\n                                    <NavLink to={\"/DemoPages/\"}>\r\n                                        <button>Back</button>\r\n                                    </NavLink>\r\n                                </td>\r\n                            </tr>\r\n                        </tbody>\r\n                    </table>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, props) => {\r\n    if (parseInt(props.match.params.id)) {\r\n        return {\r\n            product: state.productsData.products.find(item => item.id === parseInt(props.match.params.id))\r\n        }\r\n    }\r\n\r\n    return { product: null };\r\n}\r\n\r\nexport default connect(mapStateToProps, { updateProduct })(EditProduct);","import { GET_ALL_PRODUCTS, UPDATE_PRODUCT } from './types';\r\n\r\nexport const getAllProducts = () => ({\r\n    type: GET_ALL_PRODUCTS,\r\n    payload: {}\r\n});\r\n\r\nexport const updateProduct = (product) => ({\r\n    type: UPDATE_PRODUCT,\r\n    payload: { product }\r\n});","export const GET_ALL_PRODUCTS = \"GET_ALL_PRODUCTS\";\r\nexport const UPDATE_PRODUCT = \"UPDATE_PRODUCT\";","import { UPDATE_PRODUCT, GET_ALL_PRODUCTS } from '../actions/types';\r\nimport { products } from '../../productsData';\r\n\r\nconst productsData = products.map((item, key) => { return { ...item, id: key + 1 } });\r\nconst initialState = {\r\n    products: productsData\r\n};\r\n\r\nexport default function (state = initialState, action) {\r\n    switch (action.type) {\r\n        case GET_ALL_PRODUCTS:\r\n            return {\r\n                ...state,\r\n                products: productsData\r\n            }\r\n        case UPDATE_PRODUCT:\r\n            return {\r\n                ...state,\r\n                products: state.products.map((item) => {\r\n                    if (item.id === action.payload.product.id) {\r\n                        return action.payload.product;\r\n                    }\r\n                    else {\r\n                        return item;\r\n                    }\r\n                })\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}","import { combineReducers } from \"redux\";\r\nimport productsData from './productsReducer';\r\n\r\nexport default combineReducers({ productsData });\r\n","import { createStore } from \"redux\";\r\nimport rootReducer from '../reducers';\r\n\r\nexport default createStore(rootReducer);","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport ProductApp from './ProductApp';\r\nimport store from './redux/store/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <ProductApp />\r\n    </Provider>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","import React from 'react';\r\nimport ProductList from './components/ProductList';\r\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\r\nimport EditProduct from './components/EditProduct';\r\n\r\nexport default function ProductApp() {\r\n    return (\r\n        <div className=\"product-app\">\r\n            <Router>\r\n                <div>\r\n                    <Route exact path=\"/DemoPages/\" component={ProductList} />\r\n                    <Route path=\"/DemoPages/edit-product/:id\" component={EditProduct} />\r\n                </div>\r\n            </Router>\r\n        </div>\r\n    )\r\n}"],"sourceRoot":""}