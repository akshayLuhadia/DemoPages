{"version":3,"sources":["components/Product.js","components/ProductList.js","productsData.js","components/Dropdown.js","components/EditProduct.js","redux/actions/productActions.js","redux/actions/types.js","redux/reducers/productsReducer.js","redux/reducers/index.js","redux/store/store.js","serviceWorker.js","index.js","ProductApp.js"],"names":["connect","product","name","weight","availability","isEditable","to","id","style","width","textAlign","state","products","productsData","length","map","index","key","pricingInfo","budget","premier","Dropdown","props","options","selectedOption","handleOnClick","bind","this","setState","nextProps","selectBox","document","getElementById","selectedValue","selectedIndex","value","onChange","option","selected","Component","EditProduct","productUrl","pricingTier","priceRange","onSubmit","onChangeCheckbox","e","target","checked","preventDefault","updateProduct","history","push","htmlFor","type","defaultValue","required","defaultChecked","val","parseInt","match","params","find","item","payload","initialState","combineReducers","action","createStore","rootReducer","Boolean","window","location","hostname","ReactDOM","render","store","className","exact","path","component","ProductList","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iNAqBeA,iBAjBC,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OACd,4BACE,4BAAKA,EAAQC,MACb,4BAAKD,EAAQE,QACb,4BAAKF,EAAQG,cACb,4BACGH,EAAQI,WACP,kBAAC,IAAD,CAAMC,GAAE,kCAA6BL,EAAQM,KAC3C,yCAGF,QCVFC,G,MAAQ,CACZC,MAAO,MACPC,UAAW,SA+BEV,eALS,SAACW,GAEvB,MAAO,CAAEC,SADQD,EAAME,aAAaD,YAIvBZ,EA5BK,SAAC,GAAD,IAAGY,EAAH,EAAGA,SAAH,OAClB,6BACE,4CACA,2BAAOJ,MAAOA,GACZ,+BACE,4BACE,oCACA,sCACA,4CACA,+BAGJ,+BACGI,GAAYA,EAASE,OAClBF,EAASG,KAAI,SAACd,EAASe,GACrB,OAAO,kBAAC,EAAD,CAASC,IAAKD,EAAOf,QAASA,OAEvC,qB,8DCGCiB,EAAc,CACvBC,OAAQ,CACJ,QACA,QACA,UAEJC,QAAS,CACL,UACA,UACA,YCSOC,E,YA7CX,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KACDX,MAAQ,CACTY,QAAS,GACTC,eAAgB,IAEpB,EAAKC,cAAgB,EAAKA,cAAcC,KAAnB,gBANN,E,iFAUfC,KAAKC,SAAS,CACVL,QAASI,KAAKL,MAAMC,QACpBC,eAAgBG,KAAKL,MAAME,mB,gDAITK,GACtB,IAAIN,EAAUM,EAAUN,QACxBI,KAAKC,SAAS,CACVL,QAASA,M,sCAKb,IAAIO,EAAYC,SAASC,eAAe,aACpCC,EAAgBH,EAAUP,QAAQO,EAAUI,eAAeC,MAC/DR,KAAKL,MAAMW,cAAcA,K,+BAGnB,IAAD,OACL,OACI,4BAAQ1B,GAAG,YAAY6B,SAAUT,KAAKF,eACjCE,KAAKhB,MAAMY,SAAWI,KAAKhB,MAAMY,SAAWI,KAAKhB,MAAMY,QAAQR,KAAI,SAACsB,EAAQpB,GACzE,MAAkC,KAA9B,EAAKN,MAAMa,gBAAyBa,IAAW,EAAK1B,MAAMa,eACnD,4BAAQc,UAAQ,EAACrB,IAAKA,EAAKkB,MAAOE,GAASA,GAG3C,4BAAQpB,IAAKA,EAAKkB,MAAOE,GAASA,W,GAtC1CE,aCKjBC,E,YACJ,WAAYlB,GAAQ,IAAD,8BACjB,4CAAMA,KAKRX,MAAQ,CACNT,KAAM,EAAKoB,MAAMrB,QAAU,EAAKqB,MAAMrB,QAAQC,KAAO,KACrDC,OAAQ,EAAKmB,MAAMrB,QAAU,EAAKqB,MAAMrB,QAAQE,OAAS,KACzDC,aAAc,EAAKkB,MAAMrB,QAAU,EAAKqB,MAAMrB,QAAQG,aAAe,KACrEqC,WAAY,EAAKnB,MAAMrB,QAAU,EAAKqB,MAAMrB,QAAQwC,WAAa,KACjEC,YAAa,EAAKpB,MAAMrB,QAAU,EAAKqB,MAAMrB,QAAQyC,YAAc,KACnEC,WAAY,EAAKrB,MAAMrB,QAAU,EAAKqB,MAAMrB,QAAQ0C,WAAa,KACjEtC,WAAY,EAAKiB,MAAMrB,QAAU,EAAKqB,MAAMrB,QAAQI,WAAa,MAXjE,EAAK+B,SAAW,EAAKA,SAASV,KAAd,gBAChB,EAAKkB,SAAW,EAAKA,SAASlB,KAAd,gBAChB,EAAKmB,iBAAmB,EAAKA,iBAAiBnB,KAAtB,gBAJP,E,sEAgBVoB,GACPnB,KAAKC,SAAL,eAAiBkB,EAAEC,OAAO7C,KAAO4C,EAAEC,OAAOZ,U,uCAG3BW,GACfnB,KAAKC,SAAL,eAAiBkB,EAAEC,OAAO7C,KAAO4C,EAAEC,OAAOC,Y,+BAGnCF,GACPA,EAAEG,iBACF,IAAMhD,EAAU,CACdM,GAAIoB,KAAKL,MAAMrB,QAAQM,GACvBL,KAAMyB,KAAKhB,MAAMT,KACjBC,OAAQwB,KAAKhB,MAAMR,OACnBC,aAAcuB,KAAKhB,MAAMP,aACzBqC,WAAYd,KAAKhB,MAAM8B,WACvBC,YAAaf,KAAKhB,MAAM+B,YACxBC,WAAYhB,KAAKhB,MAAMgC,WACvBtC,WAAYsB,KAAKhB,MAAMN,YAEzBsB,KAAKL,MAAM4B,cAAcjD,GACzB0B,KAAKL,MAAM6B,QAAQC,KAAK,gB,+BAGhB,IAAD,OACP,OACE,6BACE,4CACuB,MAAtBzB,KAAKL,MAAMrB,QACV,0BAAM2C,SAAUjB,KAAKiB,UACnB,+BACE,+BACE,4BACE,4BACE,2BAAOS,QAAQ,eAAf,WAEF,4BACE,2BACEC,KAAK,OACLpD,KAAK,OACLK,GAAG,cACHgD,aAAc5B,KAAKhB,MAAMT,KACzBkC,SAAUT,KAAKS,SACfoB,UAAQ,MAId,4BACE,4BACE,2BAAOH,QAAQ,iBAAf,aAEF,4BACE,2BACEC,KAAK,OACLpD,KAAK,SACLK,GAAG,gBACHgD,aAAc5B,KAAKhB,MAAMR,OACzBiC,SAAUT,KAAKS,SACfoB,UAAQ,MAId,4BACE,4BACE,2BAAOH,QAAQ,uBAAf,mBAEF,4BACE,2BACEC,KAAK,SACLpD,KAAK,eACLK,GAAG,sBACHgD,aAAc5B,KAAKhB,MAAMP,aACzBgC,SAAUT,KAAKS,aAIrB,4BACE,4BACE,2BAAOiB,QAAQ,cAAf,kBAEF,4BACE,2BACEC,KAAK,OACLpD,KAAK,MACLK,GAAG,aACHgD,aAAc5B,KAAKhB,MAAM8B,WACzBL,SAAUT,KAAKS,SACfoB,UAAQ,MAId,4BACE,4BACE,+CAEF,4BACE,2BACEpB,SAAUT,KAAKS,SACfkB,KAAK,QACLpD,KAAK,cACLK,GAAG,gBACH4B,MAAM,SACNsB,eAA2C,WAA3B9B,KAAKhB,MAAM+B,cAE7B,2BAAOW,QAAQ,iBAAf,UACA,2BACEjB,SAAUT,KAAKS,SACfkB,KAAK,QACLpD,KAAK,cACLK,GAAG,iBACH4B,MAAM,UACNsB,eAA2C,YAA3B9B,KAAKhB,MAAM+B,cAE7B,2BAAOW,QAAQ,kBAAf,aAGJ,4BACE,4BACE,2BAAOA,QAAQ,qBAAf,gBAEF,4BACE,kBAAC,EAAD,CACE9B,QAASL,EAAYS,KAAKhB,MAAM+B,aAChClB,eAAgBG,KAAKhB,MAAMgC,WAC3BV,cAAe,SAACyB,GAAD,OACb,EAAKtB,SAAS,CACZW,OAAQ,CAAE7C,KAAM,aAAciC,MAAOuB,UAM/C,4BACE,4BACE,2BAAOL,QAAQ,qBAAf,gBAEF,4BACE,2BACEjB,SAAUT,KAAKkB,iBACfS,KAAK,WACLpD,KAAK,aACLK,GAAG,oBACHkD,eAAgB9B,KAAKhB,MAAMN,eAIjC,4BACE,wBAAIG,MAAO,CAAEE,UAAW,WACtB,4BAAQ4C,KAAK,UAAb,WAEF,wBAAI9C,MAAO,CAAEE,UAAW,WACtB,kBAAC,IAAD,CAASJ,GAAI,cACX,8CAQZ,sD,GAjLgBiC,aAwMXvC,eAhBS,SAACW,EAAOW,GAC9B,OAAIqC,SAASrC,EAAMsC,MAAMC,OAAOtD,IACvB,CACLN,QAASU,EAAME,aAAaD,SAASkD,MACnC,SAACC,GAAD,OAAUA,EAAKxD,KAAOoD,SAASrC,EAAMsC,MAAMC,OAAOtD,OAEhDI,EAAME,aAAaD,SAASkD,MAC1B,SAACC,GAAD,OAAUA,EAAKxD,KAAOoD,SAASrC,EAAMsC,MAAMC,OAAOtD,OAEpD,MAID,CAAEN,QAAS,QAGoB,CAAEiD,cCxMb,SAACjD,GAAD,MAAc,CACvCqD,KCP0B,iBDQ1BU,QAAS,CAAE/D,cDsMAD,CAA4CwC,G,oBG5MrD3B,ELHkB,CACpB,CACIX,KAAM,eACNwC,YAAa,SACbC,WAAY,QACZxC,OAAQ,IACRC,aAAc,IACdqC,WAAY,6DACZpC,YAAY,GAEhB,CACIH,KAAM,aACNwC,YAAa,UACbC,WAAY,UACZxC,OAAQ,IACRC,aAAc,GACdqC,WAAY,4DACZpC,YAAY,GAEhB,CACIH,KAAM,cACNwC,YAAa,SACbC,WAAY,SACZxC,OAAQ,IACRC,aAAc,GACdqC,WAAY,8DACZpC,YAAY,IKvBUU,KAAI,SAACgD,EAAM9C,GAAU,OAAO,eAAK8C,EAAZ,CAAkBxD,GAAIU,EAAM,OACzEgD,EAAe,CACjBrD,SAAUC,GCFCqD,cAAgB,CAAErD,aDKlB,WAAyC,IAA/BF,EAA8B,uDAAtBsD,EAAcE,EAAQ,uCACnD,OAAQA,EAAOb,MACX,IDVwB,mBCWpB,OAAO,eACA3C,EADP,CAEIC,SAAUC,IAElB,IDdsB,iBCelB,OAAO,eACAF,EADP,CAEIC,SAAUD,EAAMC,SAASG,KAAI,SAACgD,GAC1B,OAAIA,EAAKxD,KAAO4D,EAAOH,QAAQ/D,QAAQM,GAC5B4D,EAAOH,QAAQ/D,QAGf8D,OAIvB,QACI,OAAOpD,MEzBJyD,cAAYC,GCSPC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASb,MACvB,2DCXNc,IAASC,OACL,kBAAC,IAAD,CAAUC,MAAOA,GACb,mBCJO,WACb,OACE,yBAAKC,UAAU,eACb,kBAAC,IAAD,KACE,6BACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,aAAaC,UAAWC,IAC1C,kBAAC,IAAD,CAAOF,KAAK,8BAA8BC,UAAWxC,SDFvD,OAEJT,SAASC,eAAe,SDwHtB,kBAAmBkD,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.ccfc4d1f.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst Product = ({ product }) => (\r\n  <tr>\r\n    <td>{product.name}</td>\r\n    <td>{product.weight}</td>\r\n    <td>{product.availability}</td>\r\n    <td>\r\n      {product.isEditable ? (\r\n        <Link to={`/DemoPages/edit-product/${product.id}`}>\r\n          <button>EDIT</button>\r\n        </Link>\r\n      ) : (\r\n        \"\"\r\n      )}\r\n    </td>\r\n  </tr>\r\n);\r\n\r\nexport default connect()(Product);\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport Product from \"./Product\";\r\nimport \"./ProductList.css\";\r\n\r\nconst style = {\r\n  width: \"50%\",\r\n  textAlign: \"left\",\r\n};\r\n\r\nconst ProductList = ({ products }) => (\r\n  <div>\r\n    <h1>Product List</h1>\r\n    <table style={style}>\r\n      <thead>\r\n        <tr>\r\n          <th>Name</th>\r\n          <th>Weight</th>\r\n          <th>Availability</th>\r\n          <th></th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {products && products.length\r\n          ? products.map((product, index) => {\r\n              return <Product key={index} product={product} />;\r\n            })\r\n          : \"No products!\"}\r\n      </tbody>\r\n    </table>\r\n  </div>\r\n);\r\n\r\nconst mapStateToProps = (state) => {\r\n  const products = state.productsData.products;\r\n  return { products };\r\n};\r\n\r\nexport default connect(mapStateToProps)(ProductList);\r\n","export const products = [\r\n    {\r\n        name: \"Micromax A57\",\r\n        pricingTier: \"budget\",\r\n        priceRange: \"5k-8k\",\r\n        weight: 200, // In grams,\r\n        availability: 100,\r\n        productUrl: \"https://e...content-available-to-author-only...e.com/mma57\",\r\n        isEditable: true\r\n    },\r\n    {\r\n        name: \"OnePlus 6T\",\r\n        pricingTier: \"premier\",\r\n        priceRange: \"35k-45k\",\r\n        weight: 200, // In grams\r\n        availability: 30,\r\n        productUrl: \"https://e...content-available-to-author-only...e.com/op6t\",\r\n        isEditable: true\r\n    },\r\n    {\r\n        name: \"Redmi Ultra\",\r\n        pricingTier: \"budget\",\r\n        priceRange: \"8k-11k\",\r\n        weight: 150, // In grams\r\n        availability: 50,\r\n        productUrl: \"https://e...content-available-to-author-only...e.com/redmiu\",\r\n        isEditable: true\r\n    }\r\n]\r\n\r\nexport const pricingInfo = {\r\n    budget: [\r\n        \"4k-6k\",\r\n        \"5k-8k\",\r\n        \"8k-11k\"\r\n    ],\r\n    premier: [\r\n        \"23k-28k\",\r\n        \"30k-34k\",\r\n        \"35k-45k\"\r\n    ]\r\n}","import React, { Component } from 'react';\r\n\r\nclass Dropdown extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            options: [],\r\n            selectedOption: \"\"\r\n        };\r\n        this.handleOnClick = this.handleOnClick.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState({\r\n            options: this.props.options,\r\n            selectedOption: this.props.selectedOption\r\n        });\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps) {\r\n        let options = nextProps.options;\r\n        this.setState({\r\n            options: options\r\n        });\r\n    }\r\n\r\n    handleOnClick() {\r\n        let selectBox = document.getElementById(\"selectBox\");\r\n        var selectedValue = selectBox.options[selectBox.selectedIndex].value;\r\n        this.props.selectedValue(selectedValue);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <select id=\"selectBox\" onChange={this.handleOnClick}>\r\n                {this.state.options && this.state.options && this.state.options.map((option, key) => {\r\n                    if (this.state.selectedOption !== \"\" && option === this.state.selectedOption) {\r\n                        return <option selected key={key} value={option}>{option}</option>;\r\n                    }\r\n                    else {\r\n                        return <option key={key} value={option}>{option}</option>;\r\n                    }\r\n                })}\r\n            </select>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Dropdown;","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { pricingInfo } from \"../productsData\";\r\nimport Dropdown from \"./Dropdown\";\r\nimport { updateProduct } from \"../redux/actions/productActions\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nclass EditProduct extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.onChange = this.onChange.bind(this);\r\n    this.onSubmit = this.onSubmit.bind(this);\r\n    this.onChangeCheckbox = this.onChangeCheckbox.bind(this);\r\n  }\r\n  state = {\r\n    name: this.props.product ? this.props.product.name : null,\r\n    weight: this.props.product ? this.props.product.weight : null,\r\n    availability: this.props.product ? this.props.product.availability : null,\r\n    productUrl: this.props.product ? this.props.product.productUrl : null,\r\n    pricingTier: this.props.product ? this.props.product.pricingTier : null,\r\n    priceRange: this.props.product ? this.props.product.priceRange : null,\r\n    isEditable: this.props.product ? this.props.product.isEditable : null,\r\n  };\r\n\r\n  onChange(e) {\r\n    this.setState({ [e.target.name]: e.target.value });\r\n  }\r\n\r\n  onChangeCheckbox(e) {\r\n    this.setState({ [e.target.name]: e.target.checked });\r\n  }\r\n\r\n  onSubmit(e) {\r\n    e.preventDefault();\r\n    const product = {\r\n      id: this.props.product.id,\r\n      name: this.state.name,\r\n      weight: this.state.weight,\r\n      availability: this.state.availability,\r\n      productUrl: this.state.productUrl,\r\n      pricingTier: this.state.pricingTier,\r\n      priceRange: this.state.priceRange,\r\n      isEditable: this.state.isEditable,\r\n    };\r\n    this.props.updateProduct(product);\r\n    this.props.history.push(\"/DemoPages\");\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h3>EDIT PRODUCT</h3>\r\n        {this.props.product != null ? (\r\n          <form onSubmit={this.onSubmit}>\r\n            <table>\r\n              <tbody>\r\n                <tr>\r\n                  <td>\r\n                    <label htmlFor=\"productName\">Name: </label>\r\n                  </td>\r\n                  <td>\r\n                    <input\r\n                      type=\"text\"\r\n                      name=\"name\"\r\n                      id=\"productName\"\r\n                      defaultValue={this.state.name}\r\n                      onChange={this.onChange}\r\n                      required\r\n                    />\r\n                  </td>\r\n                </tr>\r\n                <tr>\r\n                  <td>\r\n                    <label htmlFor=\"productWeight\">Weight: </label>\r\n                  </td>\r\n                  <td>\r\n                    <input\r\n                      type=\"text\"\r\n                      name=\"weight\"\r\n                      id=\"productWeight\"\r\n                      defaultValue={this.state.weight}\r\n                      onChange={this.onChange}\r\n                      required\r\n                    />\r\n                  </td>\r\n                </tr>\r\n                <tr>\r\n                  <td>\r\n                    <label htmlFor=\"productAvailability\">Availability: </label>\r\n                  </td>\r\n                  <td>\r\n                    <input\r\n                      type=\"number\"\r\n                      name=\"availability\"\r\n                      id=\"productAvailability\"\r\n                      defaultValue={this.state.availability}\r\n                      onChange={this.onChange}\r\n                    />\r\n                  </td>\r\n                </tr>\r\n                <tr>\r\n                  <td>\r\n                    <label htmlFor=\"productURL\">Product Url: </label>\r\n                  </td>\r\n                  <td>\r\n                    <input\r\n                      type=\"text\"\r\n                      name=\"url\"\r\n                      id=\"productURL\"\r\n                      defaultValue={this.state.productUrl}\r\n                      onChange={this.onChange}\r\n                      required\r\n                    />\r\n                  </td>\r\n                </tr>\r\n                <tr>\r\n                  <td>\r\n                    <label>Price Tier </label>\r\n                  </td>\r\n                  <td>\r\n                    <input\r\n                      onChange={this.onChange}\r\n                      type=\"radio\"\r\n                      name=\"pricingTier\"\r\n                      id=\"productBudget\"\r\n                      value=\"budget\"\r\n                      defaultChecked={this.state.pricingTier === \"budget\"}\r\n                    />\r\n                    <label htmlFor=\"productBudget\">Budget</label>\r\n                    <input\r\n                      onChange={this.onChange}\r\n                      type=\"radio\"\r\n                      name=\"pricingTier\"\r\n                      id=\"productPremier\"\r\n                      value=\"premier\"\r\n                      defaultChecked={this.state.pricingTier === \"premier\"}\r\n                    />\r\n                    <label htmlFor=\"productPremier\">Premier</label>\r\n                  </td>\r\n                </tr>\r\n                <tr>\r\n                  <td>\r\n                    <label htmlFor=\"productPriceRange\">Price Range</label>\r\n                  </td>\r\n                  <td>\r\n                    <Dropdown\r\n                      options={pricingInfo[this.state.pricingTier]}\r\n                      selectedOption={this.state.priceRange}\r\n                      selectedValue={(val) =>\r\n                        this.onChange({\r\n                          target: { name: \"priceRange\", value: val },\r\n                        })\r\n                      }\r\n                    />\r\n                  </td>\r\n                </tr>\r\n                <tr>\r\n                  <td>\r\n                    <label htmlFor=\"productIsEditable\">Is Editable</label>\r\n                  </td>\r\n                  <td>\r\n                    <input\r\n                      onChange={this.onChangeCheckbox}\r\n                      type=\"checkbox\"\r\n                      name=\"isEditable\"\r\n                      id=\"productIsEditable\"\r\n                      defaultChecked={this.state.isEditable}\r\n                    />\r\n                  </td>\r\n                </tr>\r\n                <tr>\r\n                  <td style={{ textAlign: \"center\" }}>\r\n                    <button type=\"submit\">Submit</button>\r\n                  </td>\r\n                  <td style={{ textAlign: \"center\" }}>\r\n                    <NavLink to={\"/DemoPages\"}>\r\n                      <button>Back</button>\r\n                    </NavLink>\r\n                  </td>\r\n                </tr>\r\n              </tbody>\r\n            </table>\r\n          </form>\r\n        ) : (\r\n          <h3>No product found!</h3>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state, props) => {\r\n  if (parseInt(props.match.params.id)) {\r\n    return {\r\n      product: state.productsData.products.find(\r\n        (item) => item.id === parseInt(props.match.params.id)\r\n      )\r\n        ? state.productsData.products.find(\r\n            (item) => item.id === parseInt(props.match.params.id)\r\n          )\r\n        : null,\r\n    };\r\n  }\r\n\r\n  return { product: null };\r\n};\r\n\r\nexport default connect(mapStateToProps, { updateProduct })(EditProduct);\r\n","import { GET_ALL_PRODUCTS, UPDATE_PRODUCT } from './types';\r\n\r\nexport const getAllProducts = () => ({\r\n    type: GET_ALL_PRODUCTS,\r\n    payload: {}\r\n});\r\n\r\nexport const updateProduct = (product) => ({\r\n    type: UPDATE_PRODUCT,\r\n    payload: { product }\r\n});","export const GET_ALL_PRODUCTS = \"GET_ALL_PRODUCTS\";\r\nexport const UPDATE_PRODUCT = \"UPDATE_PRODUCT\";","import { UPDATE_PRODUCT, GET_ALL_PRODUCTS } from '../actions/types';\r\nimport { products } from '../../productsData';\r\n\r\nconst productsData = products.map((item, key) => { return { ...item, id: key + 1 } });\r\nconst initialState = {\r\n    products: productsData\r\n};\r\n\r\nexport default function (state = initialState, action) {\r\n    switch (action.type) {\r\n        case GET_ALL_PRODUCTS:\r\n            return {\r\n                ...state,\r\n                products: productsData\r\n            }\r\n        case UPDATE_PRODUCT:\r\n            return {\r\n                ...state,\r\n                products: state.products.map((item) => {\r\n                    if (item.id === action.payload.product.id) {\r\n                        return action.payload.product;\r\n                    }\r\n                    else {\r\n                        return item;\r\n                    }\r\n                })\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}","import { combineReducers } from \"redux\";\r\nimport productsData from './productsReducer';\r\n\r\nexport default combineReducers({ productsData });\r\n","import { createStore } from \"redux\";\r\nimport rootReducer from '../reducers';\r\n\r\nexport default createStore(rootReducer);","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport ProductApp from './ProductApp';\r\nimport store from './redux/store/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <ProductApp />\r\n    </Provider>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","import React from \"react\";\r\nimport ProductList from \"./components/ProductList\";\r\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\r\nimport EditProduct from \"./components/EditProduct\";\r\n\r\nexport default function ProductApp() {\r\n  return (\r\n    <div className=\"product-app\">\r\n      <Router>\r\n        <div>\r\n          <Route exact path=\"/DemoPages\" component={ProductList} />\r\n          <Route path=\"/DemoPages/edit-product/:id\" component={EditProduct} />\r\n        </div>\r\n      </Router>\r\n    </div>\r\n  );\r\n}\r\n"],"sourceRoot":""}